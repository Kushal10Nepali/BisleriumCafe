
@page "/Notifications"
@using BisleriumCafe.Data
@using Microsoft.JSInterop
@using System.Threading.Tasks
@inject IJSRuntime JSRuntime
@inject IJSRuntime js
@using BisleriumCafe.PDF
@using Syncfusion.Pdf
@using Syncfusion.Pdf.Grid
@using Syncfusion.Drawing
@using Syncfusion.Pdf.Graphics
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO;

<div class="reports-container">
    <h3>Reports:</h3>
    <button class="btn btn-primary" @onclick="@ExportToPdf">Export to PDF</button>

    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div class="top-sold-section">
                    <h3>Top 5 Sold Coffees</h3>
                    @if (mostSoldItems != null && mostSoldItems.Any())
                    {
                        <table class="table table-bordered table-striped">
                            <thead>
                                <tr>
                                    <th>Coffee Name</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in mostSoldItems)
                                {
                                    <tr>
                                        <td>@item.ItemName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No data available.</p>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <div class="top-addons-section">
                    <h3>Top 5 Most Sold Add-ins</h3>
                    <table class="table table-bordered table-striped">
                        <thead>
                            <tr>
                                <th>Add-ins</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var addon in mostSoldAddins)
                            {
                                <tr>
                                    <td>@addon</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>


    <div class="filter-orders-section m-auto">
        <label for="startDate">Start Date:</label>
        <input id="startDate" type="datetime-local" @bind="startDate" />
        <label for="endDate">End Date:</label>
        <input id="endDate" type="datetime-local" @bind="endDate" />
        <button class="btn btn-info" @onclick="FilterOrders">Filter Orders</button>
    </div>

    <div class="filtered-orders-section">
        @if (filteredOrders != null && filteredOrders.Any())
        {
            <div class="filtered-orders-section">
                @if (filteredOrders != null && filteredOrders.Any())
                {
                    <table class="table table-bordered-2 table-striped">
                        <thead class="thead-dark">
                            <tr>
                                <th>Coffee Name</th>
                                <th>Addins</th>
                                <th>Total Amount</th>
                                <th>Order Id</th>
                                <th>Taken at</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var order in filteredOrders)
                            {
                                <tr>
                                    <td>@order.ItemName</td>
                                    <td>
                                        @if (order.Addons != null && order.Addons.Any())
                                        {
                                            <ul>
                                                @foreach (var addon in order.Addons)
                                                {
                                                    <li>@addon</li>
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <p>No addons</p>
                                        }
                                    </td>
                                    <td>@order.TotalAmount</td>
                                    <td>@order.Id</td>
                                    <td>@order.TakenAt</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No data available.</p>
                }
            </div>

        }
        else
        {
            <p>No data available.</p>
        }
    </div>
</div>


@code {
    private List<CoffeeTaken> mostSoldItems;
    private List<string> mostSoldAddins;
    private List<CoffeeTaken> orders;
    private List<CoffeeTaken> filteredOrders;
    private DateTime startDate;
    private DateTime endDate;

    protected override void OnInitialized()
    {
        // Initialize the orders list before using it
        orders = CoffeeTakenService.GetAll() ?? new List<CoffeeTaken>();

        // Call the method to get the top 5 sold coffees
        mostSoldItems = CoffeeTakenService.GetMostSoldItems() ?? new List<CoffeeTaken>();
        mostSoldAddins = CoffeeTakenService.GetMostSoldAddins() ?? new List<string>();
    }

    private void FilterOrders()
    {
        filteredOrders = orders?.Where(order =>
            order.TakenAt >= startDate &&
            order.TakenAt <= endDate
        ).ToList() ?? new List<CoffeeTaken>();
    }

    private async Task ExportToPdf()
    {
        int paragraphAfterSpacing = 8;

        // Create a new PDF document.
        PdfDocument pdfDocument = new PdfDocument();
        // Add Page to the PDF document.
        PdfPage page = pdfDocument.Pages.Add();

        // Export the HTML content to PDF.
        ExportHtmlContentToPdf(page, paragraphAfterSpacing);

        // Create a memory stream.
        MemoryStream memoryStream = new MemoryStream();
        // Save the PDF document.
        pdfDocument.Save(memoryStream);
        // Download the PDF document.
        await JS.SaveAs("Sample.pdf", memoryStream.ToArray());
    }

    private void ExportHtmlContentToPdf(PdfPage page, int paragraphAfterSpacing)
    {
        // Add a heading for top 5 most sold coffees
        ExportHtmlToPdf(page, "<h3>Top 5 Sold Coffees</h3>", paragraphAfterSpacing);

        // List the top 5 most sold coffees
        foreach (var item in mostSoldItems)
        {
            ExportHtmlToPdf(page, $"<li>{item.ItemName}</li>", paragraphAfterSpacing);
        }

        // Add a heading for top 5 most sold add-ins
        ExportHtmlToPdf(page, "<h3>Top 5 most sold add-ins</h3>", paragraphAfterSpacing);

        // List the top 5 most sold add-ins
        foreach (var addon in mostSoldAddins)
        {
            ExportHtmlToPdf(page, $"<li>{addon}</li>", paragraphAfterSpacing);
        }

        // Add a heading for the filtered orders
        ExportHtmlToPdf(page, "<h3>Filtered Orders</h3>", paragraphAfterSpacing);

        // List the filtered orders in a table
        if (filteredOrders != null && filteredOrders.Any())
        {
            // Table header
            ExportHtmlToPdf(page, "<table><thead><tr><th>Coffee Name</th><th>Addins</th><th>Total Amount</th><th>Order Id</th><th>Taken at</th></tr></thead><tbody>", paragraphAfterSpacing);

            // Table body
            foreach (var order in filteredOrders)
            {
                ExportHtmlToPdf(page, $"<tr><td>{order.ItemName}</td><td>{string.Join(", ", order.Addons)}</td><td>{order.TotalAmount}</td><td>{order.Id}</td><td>{order.TakenAt}</td></tr>", paragraphAfterSpacing);
            }

            // Close the table body and table
            ExportHtmlToPdf(page, "</tbody></table>", paragraphAfterSpacing);
        }
        else
        {
            ExportHtmlToPdf(page, "<p>No data available.</p>", paragraphAfterSpacing);
        }
    }


    private void ExportHtmlToPdf(PdfPage page, string htmlContent, int paragraphAfterSpacing)
    {
        PdfFont font = new PdfStandardFont(PdfFontFamily.Helvetica, 12);

        // Draw the HTML content to PDF using DrawString method.
        page.Graphics.DrawString(htmlContent, font, PdfBrushes.Black, new PointF(0, 0));

        // Adjust the position for the next element.
        page.Graphics.TranslateTransform(0, font.MeasureString(htmlContent).Height + paragraphAfterSpacing);
    }
}
