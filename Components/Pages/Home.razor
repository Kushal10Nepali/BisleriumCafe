@page "/Home"
@using BisleriumCafe.Data;
@using BisleriumCafe.Shared;

@if (_globalState.ActiveUser.Roles == Roles.Admin)
{
    <div class="body">
        <nav class="navbar navbar bg justify-content-between">
            <h1 class="navbar-brand mb-0 h1">Menus</h1>
            <div class="d-flex">
                <input type="search" class="form-control search" placeholder="Search" @oninput="SearchItemName" />
                <a class='btn text-@(_sortBy == "ItemName" ? "primary" : "secondary")'
                   @onclick='()=>SortByHandler("ItemName")'>

                </a>
            </div>
            @if (_globalState.ActiveUser.Roles == Roles.Admin)
            {
                <button class="btn btn-outline-success" type="button" @onclick="OpenAddItemDialog">
                    <span class="oi oi-plus" /> Add
                </button>
            }

        </nav>


        <ul class="nav nav-tabs">
            <li class="nav-item ">
                <a class='nav-link btn @(_tabFilter == "All" ? "active" : "")' @onclick='()=>TabFilter("All")'>Menu Items</a>
            </li>

            <li class="nav-item">
                <a class='nav-link btn @(_tabFilter == "InStock" ? "active" : "")' @onclick='()=>TabFilter("InStock")'>InStock</a>
            </li>
            <li class="nav-item">
                <a class='nav-link btn @(_tabFilter == "OutOfStock" ? "active" : "")' @onclick='()=>TabFilter("OutOfStock")'>OutOfStock</a>
            </li>


        </ul>






        <table class="table">
            <thead>
                <tr>
                    <th>
                        <div class="d-flex">
                            Name
                            <a class='btn text-@(_sortBy == "ItemName" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                               @onclick='()=>SortByHandler("ItemName")'>
                                <span class='oi oi-sort-@(_sortBy == "ItemName" ? _sortDirection : "ascending")' />
                            </a>
                        </div>
                    </th>
                    <th>
                        <div class="d-flex">
                            Description
                            <a class='btn text-@(_sortBy == "despcription" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                               @onclick='()=>SortByHandler("despcription")'>
                                <span class='oi oi-sort-@(_sortBy == "despcription" ? _sortDirection : "ascending")' />
                            </a>
                        </div>
                    </th>
                    <th>
                        <div class="d-flex">
                            Price
                            <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                               @onclick='()=>SortByHandler("quantity")'>
                                <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                            </a>
                        </div>
                    </th>
                    <th>
                        <div class="d-flex">
                            Category
                            <a class='btn text-@(_sortBy == "quantity" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                               @onclick='()=>SortByHandler("quantity")'>
                                <span class='oi oi-sort-@(_sortBy == "quantity" ? _sortDirection : "ascending")' />
                            </a>
                        </div>
                    </th>
                    <th>
                        @if (_globalState.ActiveUser.Roles == Roles.Admin)
                        {
                            <div class="d-flex">
                                Created At
                                <a class='btn text-@(_sortBy == "createdAt" ? "primary" : "secondary")' data-mdb-toggle="tooltip"
                                   @onclick='()=>SortByHandler("createdAt")'>
                                    <span class='oi oi-sort-@(_sortBy == "createdAt" ? _sortDirection : "ascending")' />
                                </a>
                            </div>
                        }

                    </th>

                    <th></th>
                </tr>
            </thead>
            <tbody>
                @{
                    IEnumerable<CoffeeItems> itemList = _items;

                    if (_sortBy == "ItemName")
                    {
                        itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.ItemName) : itemList.OrderByDescending(t =>
                        t.ItemName);
                    }
                    else if (_sortBy == "despcription")
                    {
                        itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.Description) : itemList.OrderByDescending(t =>
                        t.Description);
                    }
                    else if (_sortBy == "quantity")
                    {
                        itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.Quantity) : itemList.OrderByDescending(t =>
                        t.Quantity);
                    }

                    else if (_sortBy == "createdAt")
                    {
                        itemList = _sortDirection == "ascending" ? itemList.OrderBy(t => t.CreatedAt) : itemList.OrderByDescending(t =>
                        t.CreatedAt);
                    }


                    if (_tabFilter == "InStock")
                    {
                        itemList = itemList.Where(item => item.isOutOfStock == false);
                    }
                    else if (_tabFilter == "OutOfStock")
                    {
                        itemList = itemList.Where(item => item.isOutOfStock ==true);
                    }

                    foreach (var CoffeeItems in itemList)
                    {
                        <tr>

                            <td class='@(CoffeeItems.isOutOfStock==true ? "text-decoration-line-through" : "")'>@CoffeeItems.ItemName</td>
                            <td>@CoffeeItems.Description</td>
                            <td>
                                @CoffeeItems.ItemPrice



                            </td>
                            <td>
                                @CoffeeItems.Category
                            </td>
                            <td>
                                @if (_globalState.ActiveUser.Roles == Roles.Admin)
                                {
                                    <p class="small mb-0">
                                        @CoffeeItems.CreatedAt.ToString("MMM dd, yyyy h:mm tt")
                                    </p>
                                }

                            </td>

                            <td>

                                @if (_globalState.ActiveUser.Roles == Roles.Admin)
                                {
                                    // <button class="btn btn-success" type="button"
                                    //         @onclick="()=>OpenEditItemDialog(CoffeeItems)">
                                    //     <span class="oi oi-pencil"/> Edit
                                    // </button>

                                    <button class="btn btn-success" type="button"
                                            @onclick="()=>OpenEditItemDialog(CoffeeItems)">
                                        <span class="oi oi-pencil" /> Edit
                                    </button>

                                    <button class="btn btn-dark" type="button" @onclick="()=>OpenDeleteItemDialog(CoffeeItems)">
                                        <span class="oi oi-delete" /> Delete
                                    </button>



                                    <div>
                                        <Label>
                                            <input type="checkbox" @bind="CoffeeItems.isOutOfStock" @onclick="() => HandleOutOfStock(CoffeeItems)" />
                                            Out of Stock
                                        </Label>

                                    </div>


                                }
                                else
                                {
                                    // <button class="btn btn-outline-success" type="button"
                                    // @onclick="()=>OpenEditItemDialog(CoffeeItems)">
                                    //     <span class="oi oi-pencil" /> Take Out
                                    // </button>
                                }

                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        @if (_showPasswordDialog)
        {
            <ModalDialog Title="Enter the password to make changes." OnClose="@OnPasswordDialogClose" OkLabel="Next">
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" class="form-control" @bind="enteredPassword" />
                </div>
            </ModalDialog>
        }

        @if (_showEditItemDialog)
        {
            <ModalDialog Title="@_dialogTitle" OnClose="@OnEditItemDialogClose" OkLabel="@_dialogOkLabel">
                <div class="form-floating">
                    <input id="ItemName" type="text" class="form-control" @bind="_itemModel.ItemName" placeholder="Task Name" />
                    <label for="ItemName">Item Name</label>
                </div>
                <div class="form-floating">
                    <input id="Description" type="text" class="form-control" @bind="_itemModel.Description" placeholder="Description" />
                    <label for="Description">Description</label>
                </div>
                <div class="form-floating">
                    <label for="price">Price</label>
                    <input id="price" type="number" min='0'
                           value='@_itemModel.ItemPrice' @onchange="updateItemPrice" class="form-control text-left"
                           placeholder="price">
                </div>

                <div class="form-floating">
                    <label for="category">Category</label>
                    <input id="category" type="text"
                           value='@_itemModel.Category' @onchange="UpdateCategory" class="form-control text-left"
                           placeholder="category">
                </div>
                @* <div class="dropdown p-2">
        <button class="btn btn-dark dropdown-toggle" type="button" id="categoryDropdown" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Select Category
        </button>
        <div class="dropdown-menu" aria-labelledby="categoryDropdown" value="@_itemModel.Category">
        <a @onclick="()=>UpdateCategory(" Coffee")">Coffee</a>
        <a @onclick="()=>UpdateCategory(" Add-ons")">Add-ons</a>
        </div>
        </div> *@






                @if (!string.IsNullOrEmpty(_editItemErrorMessage))
                {
                    <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
                }
            </ModalDialog>
        }

        @if (_showPasswordDialog)
        {
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" class="form-control" @bind="enteredPassword" />
            </div>
        }

        @if (_showDeleteItemDialog)
        {
            <ModalDialog Title="Delete Item" OnClose="@OnDeleteItemDialogClose" OkLabel="Confirm">
                <p>Are you sure you want to delete <strong>@_deleteItem.ItemName</strong> item?</p>
                @if (!string.IsNullOrEmpty(_deleteItemErrorMessage))
                {
                    <AlertMessage Type="danger" Message="@_deleteItemErrorMessage" />
                }
            </ModalDialog>
        }
    </div>
}
else
{
    IEnumerable<CoffeeItems> itemList = _items;
    @* IEnumerable<Member> memberList = _members; *@


    <button class="btn btn-success" type="button"
            @onclick="OpenOrderItemDialog">
        <span class="oi oi-pencil" /> Take Order
    </button>



    @if (_showOrderItemDialog)
    {


        <ModalDialog Title="@_dialogTitle" OnClose="@OpenIsMemberDialog" OkLabel="@_dialogOkLabel">


            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="item">Select the Coffee:</label>
                        <select class="form-control" id="item" @bind="selectedCoffee">
                            @foreach (var CoffeeItems in itemList.Where(CoffeeItems => CoffeeItems.Category =="Coffee"))
                            {
                                <option value="@CoffeeItems.ItemName">@CoffeeItems.ItemName</option>
                            }
                        </select>
                    </div>

                    @* <div class="form-group">
            @foreach (var CoffeeItem in itemList.Where(CoffeeItem => CoffeeItem.ItemName==selectedCoffee))
            {

            @* <label for="qty">Unit price: @CoffeeItem.ItemPrice  </label> *@
                    @*  <label for="UnitPrice">Unit price:</label>
            <input id="unit-price" type="number" min='1'
            class="form-control text-left"
            readonly value="@CoffeeItem.ItemPrice"   />

            }

            </div> *@


                    <div class="form-group">
                        @if (!string.IsNullOrEmpty(selectedCoffee))
                        {
                            var selectedCoffeeItem = itemList.FirstOrDefault(item => item.ItemName == selectedCoffee);

                            @if (selectedCoffeeItem != null)
                            {
                                <label for="UnitPrice">Unit price:</label>
                                <input id="unit-price" type="number" min='1'
                                       class="form-control text-left"
                                       readonly value="@selectedCoffeeItem.ItemPrice" />


                            }
                            else
                            {
                                <p>No coffee item found with the selected name.</p>
                            }



                        }
                    </div>






                    @*   <div class="form-group">
            <label for="item">Select the Add-ons:</label>
            <select  class="form-control" id="item"  @bind="selectedAddons" >
            @foreach (var CoffeeItems in itemList.Where(CoffeeItems => CoffeeItems.Category =="Add-ons"))
            {
            <option value="@CoffeeItems.ItemName">@CoffeeItems.ItemName</option>


            }
            </select>

            </div> *@



                    <div class="form-group">
                        <label for="selectedAddons">Select Add-ons:</label>
                        <div>
                            @foreach (var coffeeItem in itemList.Where(coffeeItem => coffeeItem.Category == "Add-ons"))
                            {
                                <div>
                                    <input type="checkbox" id="addon_@coffeeItem.ItemName" @onchange="()=>ToggleAddonSelection(coffeeItem.ItemName)" />
                                    <label for="addon_@coffeeItem.ItemName">@coffeeItem.ItemName</label>
                                </div>
                            }





                        </div>
                    </div>
























                </div>




                @* Right side of the take order section  *@


                <div class="col-md-6 ">
                    <div class="pt-11">
                        <div>
                            <p>Selected Coffee: @selectedCoffee</p>



                            <p>



                                @code
                                {
        int selectedAddonsPrice = 0;
        int selectedAddonsTotalPrice = 0;
        int selectedCoffeePrice = 0;
                        }


                        @foreach (var CoffeeItem in itemList.Where(CoffeeItem => CoffeeItem.ItemName==selectedCoffee))
                                {

                                    selectedCoffeePrice = @CoffeeItem.ItemPrice;
                                }




                            </p>

                            <p>


                                <!-- Display selected add-ons with prices -->
                                <!-- Display selected add-ons with prices -->
                                @*   <p>
                        Selected Addons:
                        <ul>
                        @foreach (var addon in selectedAddons)
                        {
                        var addonItem = itemList.FirstOrDefault(item => item.ItemName == addon);
                        if (addonItem != null)
                        {
                        <li>@addonItem.ItemName - $@addonItem.ItemPrice</li>

                        @code {



                        }
                        }
                        }
                        </ul>
                        </p>
                        *@
                                @*   <p>
                        Selected Addons:
                        <ul>
                        @foreach (var addon in selectedAddons)
                        {
                        var addonItem = itemList.FirstOrDefault(item => item.ItemName == addon);
                        if (addonItem != null)
                        {
                        <li>@addonItem.ItemName - Rs @addonItem.ItemPrice</li>







                        }



                        }


                        </ul>
                        </p> *@



                            <p>
                                Selected Addons:
                                <ul>
                                        @{
                                            // Create a list to store selected add-ons prices
                                            var selectedAddonsPrices = new List<int>();

                                            foreach (var addon in selectedAddons)
                                            {
                                                var addonItem = itemList.FirstOrDefault(item => item.ItemName == addon);
                                                // Ensure addonItem is not null before accessing its properties
                                                if (addonItem != null)
                                                {
                                                <li>@addonItem.ItemName - Rs @addonItem.ItemPrice</li>


                                                }
                                                selectedAddonsPrices.Add(addonItem.ItemPrice);
                                            }




                                            addinTotal = selectedAddonsPrices.Sum();
                                        }






                                </ul>
                            </p>












                            <!-- Display prices for coffee, add-ons, and total -->
                            <p>
                                Coffee Price: Rs @selectedCoffeePrice <br />
                                Addons Price: Rs @addinTotal <br />
                                Order Total: Rs @(addinTotal + selectedCoffeePrice)
                            </p>



                            </p>
                        </div>



                    </div>
                </div>

            </div>



            @if (!string.IsNullOrEmpty(_editItemErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_editItemErrorMessage" />
            }
        </ModalDialog>

    }

    if (_showOrderSummaryDialog)
    {
        <ModalDialog Title="@_dialogTitle" OnClose="@OnOrderItemDialogClose" OkLabel="@_dialogOkLabel">
            <div class="order-summary card">
                <div class="card-body">
                    <h5 class="card-title">Order Summary</h5>

                    <div class="d-flex justify-content-between mb-3">
                        <span>Coffee:</span>
                        <span>@selectedCoffee</span>
                    </div>

                    <div class="d-flex justify-content-between mb-3">
                        <span>Coffee Price:</span>
                        <span>@selectedCoffeePrice</span>
                    </div>

                    <div class="d-flex justify-content-between mb-3">
                        <span>Addins:</span>
                        <span>@string.Join(", ", selectedAddons)</span>
                    </div>

                    <div class="d-flex justify-content-between mb-3">
                        <span>Addins Price:</span>
                        <span>@addinTotal</span>
                    </div>

                    <hr>

                    <div class="d-flex justify-content-between total-amount">
                        <span>Sub total Amount:</span>
                        <span>@(addinTotal + selectedCoffeePrice)</span>
                    </div>

                    
                    @if (isMember)
                        {

                            <div class="d-flex justify-content-between total-amount">
                                <span>Discount:</span>
                                <span>@(discount)</span>
                            </div>
                        }
                   

                    
                        <div class="d-flex justify-content-between total-amount">
                            <span>Total Amount after discount (10%):</span>
                            <span>@(totalAmount- discount)</span>
                        </div>

                    



                </div>
            </div>
        </ModalDialog>
    }

    if (_showIsMemberDialog)
    {
        <ModalDialog Title="@_dialogTitle" OnClose="@OpenOrderSummaryDialog" OkLabel="@_dialogOkLabel">
            <div class="modal-body">
                <div class="form-group">
                    <label for="membershipDetail">Enter Membership Detail:</label>
                    <input type="text" class="form-control" id="membershipDetail" @bind="_membershipId" />
                    @* <button type="button" class="btn btn-primary" onclick="checkMembership">CheckMembership</button> *@
                </div>
                <div>
                    <button class="btn btn-success" @onclick="CheckMembership">Check Membership</button>
                </div>
            </div>
        </ModalDialog>

    }
}


@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private bool _showEditItemDialog { get; set; } = false;
    private bool _showPasswordDialog { get; set; } = false;
    private bool _showOrderItemDialog { get; set; } /* = false; */
    private bool _showDeleteItemDialog { get; set; }
    private bool _showOrderSummaryDialog { get; set; } = false;
    private bool _showIsMemberDialog { get; set; } = false;
    private bool _showMemberIdDialog { get; set; } = false;
    private List<CoffeeItems> _items { get; set; }
    private List<Member> _members { get; set; }
    private List<CoffeeTaken> _orderedC { get; set; }
    private CoffeeItems _deleteItem { get; set; }
    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }
    private string _editItemErrorMessage { get; set; }
    private string _orderItemErrorMessage { get; set; }
    private string _deleteItemErrorMessage { get; set; }
    private CoffeeItems _itemModel { get; set; }
    private CoffeeTaken _orderModel { get; set; }
    private string _tabFilter = "All";
    private string _sortBy = "despcription";
    private string _sortDirection = "ascending";
    private string selectedCoffee { get; set; }
    // private string selectedAddons { get; set; }
    private string selectedMembershipStatus { get; set; } = "NotMember";
    private string memberId { get; set; }
    private bool isMember { get; set; } = false;
    private int selectedQty { get; set; }
    private int unitPrice { get; set; }
    private string _membershipId { get; set; }
    private int OrderCount { get; set; } = 0;
    private string MembershipType { get; set; }
    private string[] selectedAddons = Array.Empty<string>();
    private int addinTotal { get; set; }
    private int discount { get; set; } 
    private int totalAmount { get; set; } 

    // public int selectedCoffeePrice { get; set; } = 0;
    // private int TotalAmount { get; set; }
    protected Boolean isOutOfStock { get; set; } = false;
    private string selectedIdentity { get; set; }
    //new
    string enteredPassword = "";
    string password = "change10";




    private string selectedQtyS => selectedQty.ToString();


    protected override void OnInitialized()
    {
        _items = CoffeeItemService.GetAll();
        
    }


    <!-- Rest of your component -->
    private void HandleOutOfStock(CoffeeItems coffeeItem)
    {
        coffeeItem.isOutOfStock = !coffeeItem.isOutOfStock;
    }

    // Check Membership handler .

    private async Task CheckMembership()
    {
        if (_members != null)
        {
            isMember = _members.Any(member =>
                member.Membername == _membershipId || member.PhoneNumber == _membershipId);
        }
        else
        {
            // Handle the case when _members is null
            isMember = false;
        }

        // Notify Blazor to re-render the component
        StateHasChanged();
    }


    // private void checkMembership()
    // {

    //     if (_members != null)
    //     {
    //         isMember = _members.Any(member =>
    //             member.Membername == _membershipId || member.PhoneNumber == _membershipId);
    //     }
    //     else
    //     {
    //         // Handle the case when _members is null
    //         isMember = false;
    //     }
    // }

    // private void checkMembershipType()
    // {
    //     if (OrderCount >=15)
    //     {
    //         MembershipType = "Regular";
    //     }
    //     else
    //     {
    //         MembershipType = "Irregular";
    //     }

    // }





    // private void priceCalculator()
    // {
    //     int totalAmount = @addinTotal + selectedCoffeePrice;
    //     double discount = totalAmount * 0.1;
    // }




    private void SortByHandler(string sortByName)
    {
        if (_sortBy == sortByName)
        {
            _sortDirection = _sortDirection == "ascending" ? "descending" : "ascending";
        }
        else
        {
            _sortBy = sortByName;
            _sortDirection = "ascending";
        }
    }

    private void OpenAddItemDialog()
    {
        _dialogTitle = "Add Coffee Item";
        _dialogOkLabel = "Add";
        _itemModel = new CoffeeItems();
        _itemModel.Id = Guid.Empty;
        _showEditItemDialog = true;
    }

    private void ToggleAddonSelection(string addonName)
    {
        if (Array.IndexOf(selectedAddons, addonName) != -1)
        {
            selectedAddons = selectedAddons.Where(a => a != addonName).ToArray();
        }
        else
        {
            selectedAddons = selectedAddons.Concat(new[] { addonName }).ToArray();
        }
    }


    private void OpenOrderItemDialog()
    {
        _dialogTitle = "Add Order Item";
        _dialogOkLabel = "Take Order";
        _orderModel = new CoffeeTaken();
        _orderModel.Id = Guid.Empty;
        _showOrderItemDialog = true;
    }

    private void OpenOrderSummaryDialog()
    {

        

        _dialogTitle = "Order Summary";
        _dialogOkLabel = "Proceed to Payment";
        _orderModel = new CoffeeTaken();
        _orderModel.Id = Guid.Empty;
        _showIsMemberDialog = false;
        _showOrderSummaryDialog = true;
        _orderModel.MembershipVerificationId = _membershipId;
    }

    private void OpenIsMemberDialog(bool isCancel)
    {
        if (isCancel)
        {
            _showIsMemberDialog=false;

        }
        else
        {

        }

        _dialogTitle = "If the customer is a member , fill the membership";
        _dialogOkLabel = "Next";
        _orderModel = new CoffeeTaken();
        _orderModel.Id = Guid.Empty;
        _showIsMemberDialog = true;


    }





    private void SearchItemName(ChangeEventArgs e)
    {
        var searchTerm = e.Value.ToString();
        if (!string.IsNullOrEmpty(searchTerm) && searchTerm.Length > 2)
        {
            _items = CoffeeItemService.GetAll().Where(t =>
            t.ItemName.ToLower().Contains(searchTerm.ToLower())).ToList();
        }
        else
        {
            _items = CoffeeItemService.GetAll();
        }
    }

    private void OpenEditItemDialog(CoffeeItems editItem)
    {
        enteredPassword = "";
        // _showPasswordDialog = true;
        _dialogTitle = "Edit Item";
        _dialogOkLabel = "Save";

        _itemModel = editItem;
        _showPasswordDialog = true;





    }


    private void OpenDeleteItemDialog(CoffeeItems InventoryItem)
    {
        _deleteItem = InventoryItem;
        _showDeleteItemDialog = true;
    }

    private void updateItemPrice(ChangeEventArgs e)
    {

        if (_globalState.ActiveUser.Roles == Roles.Admin)
        {
            _itemModel.ItemPrice = int.Parse(e.Value.ToString());
        }

    }



    private void UpdateCategory(ChangeEventArgs e)
    {
        if (_globalState.ActiveUser.Roles == Roles.Admin)
        {
            // Assuming _itemModel.Category is a string property
            _itemModel.Category = e.Value.ToString();


        }
    }


    private void OnPasswordDialogClose()
    {
        _showPasswordDialog = false;
        if (enteredPassword==password)
        {
            _showEditItemDialog = true;
        }
    }

    private void OnEditItemDialogClose(bool isCancel)
    {
        Guid approvedBy = Guid.Empty;
        if (isCancel)
        {
            _showEditItemDialog = false;
        }
        else
        {

            try
            {
                _editItemErrorMessage = "";

                if (_globalState.ActiveUser.Roles == Roles.Admin)
                {
                    approvedBy = _globalState.ActiveUser.Id;
                }

                if (_itemModel.Id == Guid.Empty)
                {
                    _items = CoffeeItemService.Create(_globalState.ActiveUser.Id, _itemModel.ItemName, _itemModel.Description, _itemModel.Category, _itemModel.Quantity, _itemModel.ItemPrice, approvedBy);
                }
                else
                {
                    _items = CoffeeItemService.Update(_itemModel.Id, _itemModel.ItemName, _itemModel.Description, _itemModel.Category, _itemModel.Quantity, _itemModel.ItemPrice, approvedBy);
                }
                _showEditItemDialog = false;
            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }


        }
    }




    private void UpdateOrderModel()
    {
        // _orderModel.ItemName = selectedCoffee + " with " + selectedAddons;
        _orderModel.ItemName = selectedCoffee;
        _orderModel.Addons = selectedAddons;
        _orderModel.TotalAmount = addinTotal + selectedCoffeePrice;


    }






    private void OnOrderItemDialogClose(bool isCancel)
    {
        // Guid approvedBy = Guid.Empty;

        _showOrderSummaryDialog = false;

        if (isCancel)
        {
            _showOrderItemDialog = false;
        }
        else
        {
            try
            {
                _editItemErrorMessage = "";

                // if (_globalState.ActiveUser.Roles == Roles.Admin)
                // {
                //     approvedBy = _globalState.ActiveUser.Id;
                // }
                if (selectedAddons !=null && selectedCoffee !=null)
                {
                    UpdateOrderModel();

                }

                _orderedC = CoffeeTakenService.Create(_orderModel.ItemName, _orderModel.TotalAmount, _orderModel.TakenBy, _orderModel.MembershipVerificationId, _orderModel.Addons);


                _showOrderItemDialog = false;

            }
            catch (Exception e)
            {
                _editItemErrorMessage = e.Message;
            }


        }
    }



    private void OnDeleteItemDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteItemDialog = false;
            _deleteItem = null;
        }
        else
        {
            try
            {
                _deleteItemErrorMessage = "";
                _items = CoffeeItemService.Delete(_deleteItem.Id);
                _showDeleteItemDialog = false;
                // _showOrderSummary = true;
                _deleteItem = null;
            }
            catch (Exception e)
            {
                _deleteItemErrorMessage = e.Message;
            }
        }
    }
    private void TabFilter(string status)
    {
        _tabFilter = status;
    }



}

