@page "/Membership"
@using BisleriumCafe.Data
@using BisleriumCafe.Shared

<div class="body">
    <nav class="navbar navbar-expand-lg navbar-light bg-light justify-content-between">
        <h1 class="navbar-brand mb-0 h1">Members</h1>
        <div class="d-flex">
            <button class="btn btn-outline-success mr-2" type="button" @onclick="OpenAddMemberDialog">
                <span class="oi oi-plus" /> Register Member
            </button>
            @* <button class="btn btn-outline-success" type="button" @onclick="UpdateOrderCountsAndCheckRegular">
            <span class="oi oi-plus" /> Update Membership
            </button> *@
        </div>
    </nav>
    <table class="table mt-4">
        <thead>
            <tr>
                <th>Member Id</th>
                <th>Member Name</th>
                <th>Phone Number</th>
                <th>Order Count</th>
                <th>Type</th>
                <th>Created At</th>
                @* <th>CreatedBy</th> *@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var member in _members)
            {
                <tr>
                    <td>@member.Id</td>
                    <td>@member.Membername</td>
                    <td>@member.PhoneNumber</td>
                    <td>@member.OrderCount</td>
                    <td>@GetMembershipType(member.OrderCount)</td>
                    @* <td><td>@(member.MembershipType == 0 ? "Regular" : "Irregular")</td></td> *@
                    <td>@member.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                    @* <td>
                @{
                var creator = MemberService.GetById(member.CreatedBy);
                <span>@(creator == null ? "Unknown" : creator.Membername)</span>
                }
                </td> *@
                    <td>
                        <button disabled="@(_globalState.ActiveUser != null ? _globalState.ActiveUser.Id == member.Id : false)"
                                class="btn btn-dark" type="button" @onclick="()=>OpenDeleteMemberDialog(member)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (_showAddMemberDialog)
    {
        <ModalDialog Title="Add Member" OnClose="@OnAddMemberDialogClose" OkLabel="Add">
            <form>
                <div class="form-floating">
                    <input type="text" class="form-control username" @bind="_membername" placeholder="Member Name" />
                    <label for="floatingInput">Member Name</label>
                </div>
                <div class="form-floating mb-3">
                    <input type="text" class="form-control password" @bind="_phoneNumber" placeholder="Phone Number" />
                    <label for="floatingPassword">Phone Number</label>
                </div>
                @* <div class="form-check">
            <input id="userRole" type="radio" class="form-check-input" name="role" value="@Roles.User"
            @onchange="RoleChangeHandler" checked="@(_role == Roles.User)">
            <label class="form-check-label" for="userRole">@Roles.User</label>
            </div> *@

                @*   <div class="form-check">
            <input id="adminRole" type="radio" class="form-check-input" name="role" value="@Roles.Admin"
            @onchange="RoleChangeHandler" checked="@(_role == Roles.Admin)">
            <label class="form-check-label" for="adminRole">@Roles.Admin</label>
            </div>
            *@
                @if (!string.IsNullOrEmpty(_addMemberErrorMessage))
                {
                    <AlertMessage Type="danger" Message="@_addMemberErrorMessage" />
                }
            </form>
        </ModalDialog>
    }

    @if (_showDeleteMemberDialog)
    {
        <ModalDialog Title="Delete Member" OnClose="@OnDeleteMemberDialogClose" OkLabel="Confirm">
            <p>Are you sure you want to delete <strong>@_deleteMember.Membername</strong> Member and their data?</p>
            @if (!string.IsNullOrEmpty(_deleteMemberErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_deleteMemberErrorMessage" />
            }
        </ModalDialog>
    }
</div>


@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<Member> _members { get; set; }
    private bool _showAddMemberDialog { get; set; }
    private bool _showDeleteMemberDialog { get; set; }
    private string _addMemberErrorMessage { get; set; }
    private string _deleteMemberErrorMessage { get; set; }
    private Member _deleteMember { get; set; }
    private string _membername { get; set; }
    private string _phoneNumber { get; set; }
    private int _orderCount { get; set; } = 0;
    // private Roles _role { get; set; }
    private List<CoffeeTaken> _orderedC { get; set; }




    protected override void OnInitialized()
    {
        _members = MemberService.GetAll();
        _orderedC = CoffeeTakenService.GetAll();
        UpdateOrderCountsBasedOnGroups(CoffeeTakenService.GroupOrdersByMembershipId());
        // UpdateMembershipTypeBasedOnCoffeeTaken(CoffeeTakenService.GroupOrdersByMembershipId());
        // UpdateMembershipTypeBasedOnCoffeeTaken(_members, CoffeeTakenService.GetAll());

        

        base.OnInitialized();
    }

    private void UpdateOrderCountsBasedOnGroups(Dictionary<string, List<CoffeeTaken>> groupedOrders)
    {
        foreach (var kvp in groupedOrders)
        {
            string membershipVerificationId = kvp.Key;
            List<CoffeeTaken> ordersForId = kvp.Value;

            Member member = _members.FirstOrDefault(x => x.PhoneNumber == membershipVerificationId || x.Membername == membershipVerificationId);

            if (member != null)
            {
                // Update OrderCount based on the count of orders for this MembershipVerificationId
                member.OrderCount = ordersForId.Count;
            }
        }
    }

 private void UpdateMembershipTypeBasedOnCoffeeTaken(Dictionary<string, List<CoffeeTaken>> groupedOrders)
{
    foreach (var kvp in groupedOrders)
    {
        string membershipVerificationId = kvp.Key;
        List<CoffeeTaken> ordersForId = kvp.Value;

        // Find the member in the _members list using the membershipVerificationId
        Member member = _members.FirstOrDefault(x => x.PhoneNumber == membershipVerificationId || x.Membername == membershipVerificationId);

        if (member != null)
        {
            // Extract unique weekdays when coffee was taken, excluding Saturday and Sunday
            var weekdays = ordersForId
                .Where(order => order.TakenAt.DayOfWeek != DayOfWeek.Saturday && order.TakenAt.DayOfWeek != DayOfWeek.Sunday)
                .ToList();

            // Check if the member made purchases on every weekday (Monday to Friday) for a month
            bool isRegular = weekdays.Count >= 22;

            // Set the MembershipType accordingly (0 for regular, 1 for irregular)
            member.MembershipType = isRegular ? 1 : 0;
        }
    }
}



private static bool IsRegularCustomerForMonth(List<CoffeeTaken> ordersForId)
{
    // Get the distinct days of the month when coffee was taken
    var daysOfMonth = ordersForId
        .Select(order => order.TakenAt.Date.Day)
        .Distinct()
        .ToList();

    // Check if the member made purchases on every weekday (Monday to Friday) for a month
    return daysOfMonth.Count >= 22 && daysOfMonth.All(day => day >= 1 && day <= 31);
}


  


    private string GetMembershipType(int OrderCount)
    {
        return OrderCount >=22 ? "Regular" : "Irregular";
    }

    

    


    private void OpenAddMemberDialog()
    {
        _showAddMemberDialog = true;
        _membername = "";
        _phoneNumber = "";
        // _role = Roles.User;
    }



    // List<CoffeeTaken> items = CoffeeTakenService.GetAll();
    // List<Member> members = MemberService.GetAll();

    // public void UpdateOrderCounts()
    // {
    //     // Initialize the order count for each member to 0
    //     foreach (Member member in members)
    //     {
    //         member.OrderCount = 0;
    //     }

    //     // Count the orders for each member
    //     foreach (CoffeeTaken order in items)
    //     {
    //         Member correspondingMember = members.Find(m => m.Membername == order.MembershipVerificationId || m.PhoneNumber == order.MembershipVerificationId);

    //         if (correspondingMember != null)
    //         {
    //             correspondingMember.OrderCount++;
    //         }
    //     }

        // Now, each member object in the members list has its OrderCount property updated
        // You can save the updated members list to your data storage (e.g., JSON file, database)

    


    private void OnAddMemberDialogClose(bool isCancel)
    {

        if (isCancel)
        {

            _showAddMemberDialog = false;
        }
        else
        {
            // UpdateOrderCounts();
            try
            {
                    _addMemberErrorMessage = "";
                    _members = MemberService.Create( _membername, _phoneNumber , _orderCount);
                    _showAddMemberDialog = false;
                 

            }
            catch (Exception e)
            {
                _addMemberErrorMessage = e.Message;
            }
        }
    }

    // private void RoleChangeHandler(ChangeEventArgs e)
    // {
    //     _role = (Roles)Enum.Parse(typeof(Roles), e.Value.ToString());
    // }

    private void OpenDeleteMemberDialog(Member member)
    {
        _deleteMember = member;
        _showDeleteMemberDialog = true;
    }
    private void OnDeleteMemberDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteMemberDialog = false;
            _deleteMember = null;
        }
        else
        {
            try
            {
                _deleteMemberErrorMessage = "";
                _members = MemberService.Delete(_deleteMember.Id);
                _showDeleteMemberDialog = false;
                _deleteMember = null;
            }
            catch (Exception e)
            {
                _deleteMemberErrorMessage = e.Message;
            }
        }
    }

    
}
