@page "/users"
@using BisleriumCafe.Data;

@* Added *@
@using BisleriumCafe.Shared; 

<div class="body">
<nav class="navbar navbar-light bg-light justify-content-between">
    <h1 class="navbar-brand mb-0 h1">Users</h1>

    <button class="btn btn-outline-success" type="button" @onclick="OpenAddUserDialog">
        <span class="oi oi-plus" /> Add
    </button>

</nav>
<table class="table">
    <thead>
        <tr>
            <th>User Id</th>
            <th>Username</th>
            <th>Role</th>
            <th>Created At</th>
            <th>CreatedBy</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Username</td>
                <td>@user.Roles.ToString()</td>
                <td>@user.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                <td>
                    @{
                        var creator = UserService.GetById(user.CreatedBy);
                        <span>@(creator == null ? "Unknown" : creator.Username)</span>
                    }
                </td>
                <td>
                    <button disabled="@(_globalState.ActiveUser != null ? _globalState.ActiveUser.Id == user.Id : false)"
                        class="btn btn-dark" type="button" @onclick="()=>OpenDeleteUserDialog(user)">
                        <span class="oi oi-delete" /> Delete
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (_showAddUserDialog)
{
    <ModalDialog Title="Add User" OnClose="@OnAddUserDialogClose" OkLabel="Add">
        <form>
            <div class="form-floating">
                <input type="text" class="form-control username" @bind="_membername" placeholder="Username" />
                <label for="floatingInput">Username</label>
            </div>
            <div class="form-floating mb-3">
                <input type="password" class="form-control password" @bind="_password" placeholder="Password" />
                <label for="floatingPassword">Password</label>
            </div>
            <div class="form-check">
                <input id="userRole" type="radio" class="form-check-input" name="role" value="@Roles.User"
                   @onchange="RoleChangeHandler" checked="@(_role == Roles.User)">
                <label class="form-check-label" for="userRole">@Roles.User</label>
            </div>
            <div class="form-check">
                <input id="adminRole" type="radio" class="form-check-input" name="role" value="@Roles.Admin"
                   @onchange="RoleChangeHandler" checked="@(_role == Roles.Admin)">
                <label class="form-check-label" for="adminRole">@Roles.Admin</label>
            </div>
            @if (!string.IsNullOrEmpty(_addUserErrorMessage))
            {
                <AlertMessage Type="danger" Message="@_addUserErrorMessage" />
            }
        </form>
    </ModalDialog>
}

@if (_showDeleteUserDialog)
{
    <ModalDialog Title="Delete User" OnClose="@OnDeleteUserDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteUser.Username</strong> user and their data?</p>
        @if (!string.IsNullOrEmpty(_deleteUserErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteUserErrorMessage" />
        }
    </ModalDialog>
}
</div>

@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<User> _users { get; set; }
    private bool _showAddUserDialog { get; set; }
    private bool _showDeleteUserDialog { get; set; }
    private string _addUserErrorMessage { get; set; }
    private string _deleteUserErrorMessage { get; set; }
    private User _deleteUser { get; set; }
    private string _membername { get; set; }
    private string _password { get; set; }
    private Roles _role { get; set; }

    protected override void OnInitialized()
    {
        _users = UserService.GetAll();
    }

    private void OpenAddUserDialog()
    {
        _showAddUserDialog = true;
        _membername = "";
        _password = "";
        _role = Roles.User;
    }
    private void OnAddUserDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showAddUserDialog = false;
        }
        else
        {
            try
            {
                if (_role == Roles.Admin && UserService.GetAll().Where(user => user.Roles == Roles.Admin).ToList().Count >= 2)
                {
                    _addUserErrorMessage = "Admin Cannot be more than 2";
                    //_showAddUserDialog = false;
                }
                else
                {
                    _addUserErrorMessage = "";
                    _users = UserService.Create(_globalState.ActiveUser.Id, _membername, _password, _role);
                    _showAddUserDialog = false;
                }

            }
            catch (Exception e)
            {
                _addUserErrorMessage = e.Message;
            }
        }
    }

    private void RoleChangeHandler(ChangeEventArgs e)
    {
        _role = (Roles)Enum.Parse(typeof(Roles), e.Value.ToString());
    }

    private void OpenDeleteUserDialog(User user)
    {
        _deleteUser = user;
        _showDeleteUserDialog = true;
    }
    private void OnDeleteUserDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteUserDialog = false;
            _deleteUser = null;
        }
        else
        {
            try
            {
                _deleteUserErrorMessage = "";
                _users = UserService.Delete(_deleteUser.Id);
                _showDeleteUserDialog = false;
                _deleteUser = null;
            }
            catch (Exception e)
            {
                _deleteUserErrorMessage = e.Message;
            }
        }
    }
    }